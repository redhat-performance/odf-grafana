---
- name: Grant the grafana service account the cluster-monitoring-view
  command: "oc -n {{ grafana_namespace }} adm policy add-cluster-role-to-user cluster-monitoring-view -z {{ grafana_service_account }}"

- name: Determine the grafana service account's token name
  command: "oc -n {{ grafana_namespace }} get sa {{ grafana_service_account }} -o jsonpath='{.secrets[0].name}'"
  register: secret_name

- name: Fetch the token - method 1
  shell: "oc -n {{ grafana_namespace }} get secret {{ secret_name.stdout }} -o jsonpath='{.data.token}' | base64 -d"
  register: sa_secret_method_1

- name: Fetch the token - method 2
  shell: "oc -n {{ grafana_namespace }} get secret {{ secret_name.stdout }} -o jsonpath='{.metadata.annotations.openshift\\.io/token-secret\\.value}'"
  register: sa_secret_method_2

- name: create token for OCP4.16 for 60 days - method 3
  shell: "oc -n {{ grafana_namespace }} create token {{ grafana_service_account }} --duration=$((60*24))h"
  register: sa_token

- name: Set the token from Service Account secret from method 1
  set_fact:
    token: "{{ sa_secret_method_1.stdout }}"
  when:
    - secret_name.rc == 0
    - sa_secret_method_1.stdout

- name: Set the token from Service Account secret from method 2
  set_fact:
    token: "{{ sa_secret_method_2.stdout }}"
  when:
    - secret_name.rc == 0
    - sa_secret_method_2.stdout
    - not sa_secret_method_1.stdout

- name: set token for OCP4.16
  set_fact:
    token: "{{ sa_token.stdout }}"
  when:
    - secret_name.rc == 0
    - sa_token.stdout
    - not sa_secret_method_2.stdout

- name: Show token
  debug:
    msg: "{{ token }}"

- name: Fail if we can't determine the token
  fail:
    msg: "Unable to get the token from the {{ grafana_service_account }} Service Account"
  when:
    - secret_name.rc > 0

- name: Add Prometheus datasource to Grafana
  command:
    cmd: oc apply -f -
    stdin: "{{ lookup('template', 'prometheus_datasource.j2') }}"


- name: Get Prometheus DataSource UID
  command:
    cmd: oc get -n {{ grafana_namespace }} grafanadatasource prometheus -ojsonpath="{.metadata.uid}"
  register: prometheus_datasource

- name: Set Prometheus DataSource UID as fact
  set_fact:
    prometheus_datasource_uid: "{{ prometheus_datasource.stdout }}"

- name: Add Infinity datasource to Grafana
  command:
    cmd: oc apply -f -
    stdin: "{{ lookup('template', 'infinity_datasource.j2') }}"
